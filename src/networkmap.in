#!/usr/bin/env @PYTHON@
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import logging
import os
import sys

# --- Insert the site-packages install path for the installed modules ---
# This is the critical fix so Python can find the installed networkmap package.
# The path here matches the Meson install path for Python packages.
# Adjust if your Meson setup uses a different path or variable.

python_version = f"python{sys.version_info.major}.{sys.version_info.minor}"
site_packages_path = os.path.join('/usr/local/lib', python_version, 'site-packages')

if site_packages_path not in sys.path:
    sys.path.insert(0, site_packages_path)
# --- END of sys.path modification ---

# Attempt to import config early for debug flags.
# This assumes 'networkmap' is in the path, which it should be due to the
# sys.path modification above.
try:
    from networkmap import config
except ImportError:
    # Fallback if config cannot be imported, debug messages will not be conditional here.
    # This might happen if script is run in a weird environment or before full package setup.
    class DummyConfig:
        DEBUG_ENABLED = False # Default to False if config is not available
    config = DummyConfig()

# It's important that gi is imported after config, so that config.DEBUG_ENABLED
# can be used by any gi-related debug messages if needed immediately on import.
import gi
gi.require_version("Adw", "1")
from gi.repository import Adw, Gio, GLib # Grouped gi imports

conf = {
    'PYTHON': '@PYTHON@',
    'VERSION': '@VERSION@',
    'RESOURCE_PATH': '@RESOURCE_PATH@',
    'localedir': '@localedir@',
    'pkgdatadir': '@pkgdatadir@'
}

# --- BEGIN Adwaita Import Test ---
if config.DEBUG_ENABLED:
    print("DEBUG: Attempting direct import of Adwaita...", file=sys.stderr) # Keep using stderr for early messages
try:
    # gi, Adw already imported
    if config.DEBUG_ENABLED:
        print("DEBUG: Direct import of Adwaita (Adw) SUCCEEDED.", file=sys.stderr) # Keep using stderr
except Exception as e_adw_test: # Make this more specific if possible
    if config.DEBUG_ENABLED:
        print(f"DEBUG: Direct import of Adwaita (Adw) FAILED: {type(e_adw_test).__name__}: {e_adw_test}", file=sys.stderr) # Keep using stderr
# --- END Adwaita Import Test ---

# 2. Load GResources
try:
    # Gio, GLib already imported
    resource_path = conf['RESOURCE_PATH']

    if os.path.exists(resource_path):
        if config.DEBUG_ENABLED: # Ensure config is usable here
            print(f"INFO: Attempting to load resource from: {resource_path}", file=sys.stderr)
        resource = Gio.Resource.load(resource_path)
        Gio.resources_register(resource)
        if config.DEBUG_ENABLED:
            print(f"INFO: Successfully loaded and registered resources from: {resource_path}", file=sys.stderr)
    else:
        print(f"ERROR: Compiled GResource file not found at {resource_path}. Application may fail to load UI.", file=sys.stderr)

except ImportError as e: # This typically refers to Gio/GLib not being importable at Python level
    print(f"ERROR: Could not import Gio/GLib for GResource loading: {e}", file=sys.stderr)
    sys.exit(1)
except GLib.Error as e: # This is for errors from GLib/Gio C functions, e.g. file not found by Gio.Resource.load
    print(f"ERROR: GLib.Error loading GResource {resource_path}: {e}", file=sys.stderr)
    sys.exit(1)
except Exception as e: # Other unexpected errors
    print(f"ERROR: Unexpected error during GResource loading: {e}", file=sys.stderr)
    sys.exit(1)
# --- END of GResource Loading Block ---

from networkmap import main as app_main # Application specific

# 3. Run the main application module (app_main already imported)
try:
    if __name__ == '__main__':
        sys.exit(app_main.main(sys.argv))
except ImportError as e: # This specific catch might be less relevant now if main import is at top
    print(f"ERROR: Failed to import the main application module 'networkmap.main'.", file=sys.stderr)
    print(f"Error details: {type(e).__name__}: {e}", file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f"ERROR: Unexpected error while importing 'networkmap.main'.", file=sys.stderr)
    print(f"Error details: {type(e).__name__}: {e}", file=sys.stderr)
    sys.exit(1)
